#include <iostream>#include <algorithm>#include <opencv2/core/core.hpp>#include <opencv2/imgproc/imgproc.hpp>#include <opencv2/highgui/highgui.hpp>#include <cmath>#include <vector>#define GetMatIdx(img,y,x) ((y)*img.cols*img.channels()+(x)*img.channels())std::vector<cv::Point> myMatch(cv::Mat src,cv::Mat pattern){	std::vector<cv::Point> p;	for(int i = 0 ; i < src.rows - pattern.rows + 1 ; i++){		for(int j = 0 ; j < src.cols - pattern.cols + 1 ; j++){			double calc = 0;			for(int k = 0 ; k < pattern.rows ; k++){				for(int l = 0 ; l < pattern.cols ; l++){					int sum = 0;					for(int c = 0 ; c < pattern.channels() ; c++){						int d = src.data[GetMatIdx(src,i+k,j+l)+c] - pattern.data[GetMatIdx(pattern,k,l)+c];						sum += d * d;					}					calc += sum;					if( calc / (pattern.cols*pattern.rows) > 1000 ) break;				}			}			if( calc / (pattern.cols*pattern.rows) < 1000){			p.push_back(cv::Point(j,i));						}		}	}	return p;	}/*つかいかた./ぷろぐらむ　元がぞう　パターンファイル1 パターンファイル2 ... パターンファイルnしきい値はうえの関数の1000とかいうところをいじってください差分の二乗和の総和を評価値に計算してます．かなり遅いです．*/intmain(int argc, char *argv[]){using namespace std;  // 探索画像  cv::Mat search_img = cv::imread(argv[1], 1);  if(search_img.empty()) return -1; cv::namedWindow("search image", CV_WINDOW_AUTOSIZE|CV_WINDOW_FREERATIO); for(int o = 2 ; o < argc ;  o++){		cv::Mat tmp_img = cv::imread(argv[o], 1);		if(tmp_img.empty()) return -1;   				std::vector<cv::Point> res = myMatch(search_img,tmp_img);		cout << res.size() << endl;		for(int i = 0 ; i < res.size() ; i++){			cv::rectangle(search_img, res[i], cv::Point(res[i].x+tmp_img.cols,res[i].y+tmp_img.rows), cv::Scalar(0,0,200), 1, 4);		}		cv::imshow("search image", search_img);		}		cv::waitKey(0);}